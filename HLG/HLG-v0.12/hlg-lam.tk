#    hlg
#    an airplug compatible program
#    author: pmarillo, hlg from NET v0.31
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE LAMPORT'S CLOCK ####################################################

package require math

### VARIABLES OF THE MODULE ###################################################
# Current value of the local Lamport's clock
set HLG_lam_h $HLG_rc_lamh

###############################################################################
 
 
### GRAPHICAL AREA OF THE MODULE ##############################################
labelframe .lam -pady 2 -padx 2 \
    -text "Lamport's clock \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle
 
label .lam.t -text "Local Lamport's clock = "
label .lam.h -textvariable HLG_lam_h -width 4 -anchor w
pack .lam.t .lam.h -side left
 

###############################################################################
 
 
### COMMAND LINE OPTION #######################################################
 

foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
 
    switch -- $name {
	--hlg-hini {
	    if { $value == "" } {
		APG_vrb_dispwarning "option $name found without argument ; ignored" "hlg-lam"
	    } else {
		set HLG_lam_h $value
		APG_vrb_dispnotif "option $option found; initial Lamport's clock value=$value" "hlg-lam"
            }
	}
    }
} 
###############################################################################

# Renvoie 1 sur value est un nombre, 0 sinon : 
proc isnumeric { value } {
    if {![catch {expr {abs($value)}}]} {
        return 1
    }
    set value [string trimleft $value 0]
    if {![catch {expr {abs($value)}}]} {
        return 1
    }
    return 0
}

# Determine le nom du site en requete ayant la plus petite estampille :
proc HLG_lam_tab_min { } {
    set min_key $::APG_ident$::HLG_mtx_datesuffix
    set min_value $::tab($::APG_ident$::HLG_mtx_datesuffix)
    foreach {key value} [array get ::tab] {
	if { [isnumeric $value] } {
	    set ident [lindex [split $key _ ] 0]
	    if { $::tab($ident$::HLG_mtx_statesuffix) == $::HLG_mtx_req } {
		if { $value < $min_value } {
		    set min_value $value
		    set min_key $key
		} elseif { $value == $min_value && 0 > [string compare $key $min_key] } {
		    set min_value $value
		    set min_key $key
		}
	    }
	}
    } 
    return $min_key
}
 
### PROCEDURES OF THE MODULE ##################################################
#-- Procedure HLG_lam_incrandget ---------------------------------------------#
# Action : incremente the clock and return it                                 #
# Input  : nothing                                                            #
# Output : clock                                                              #
#-----------------------------------------------------------------------------#
proc HLG_lam_incrandget { } {
    incr ::HLG_lam_h
    return $::HLG_lam_h
}

proc HLG_lam_incr { } {
    incr ::HLG_lam_h
}
 
#-- Procedure HLG_lam_update -------------------------------------------------#
# Action : update the clock, h <- max(h_rcv, h) + 1                           #
# Input  : received clock                                                     #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc HLG_lam_update { h_rcv } {
    set ::HLG_lam_h [::math::max $h_rcv $::HLG_lam_h ]
    incr ::HLG_lam_h
}
 
###############################################################################

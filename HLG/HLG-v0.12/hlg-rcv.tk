#    hlg
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# mnemonic for transporting the clock
set HLG_rcv_mnemoclk $HLG_rc_mnemoclk

# dernier message recu
set HLG_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set HLG_rcv_app $APG_msg_unknown

# application destinataire du dernier message (en cas d'option --whatwhowhere)
set HLG_des_app $APG_msg_unknown

# mnemonique pour le header HLG, contenant le nom de l'application qui a emis
# le message transporte.
set HLG_rcv_mnemoapp $HLG_rc_mnemoapp

###############################################################################

### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable HLG_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable HLG_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
#TODO add destination label
label .rcv.t3 -text "vers "
label .rcv.des -textvariable HLG_des_app -width 4 -fg $APG_int_colmsgrcv
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg .rcv.t3 .rcv.des -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app .rcv.des -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
		--source {
			#--------------------------------------------------------------------------------
			# applications emettrices auxquelles il faut s'abonner
			#--------------------------------------------------------------------------------
			if { $value == "" } {
					APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
			} else {
					APG_vrb_dispwarning "option $option trouvee, abonnement a l'app source $value"
					APG_begin_lch $value
			}
		}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {

	# Mise a jour de l'interface du module rcv.
    set ::HLG_rcv_msg $what
    set ::HLG_rcv_app $who

	# Traitement different selon l'emetteur.
    switch -- $::HLG_rcv_app \
	$::APP {
		# Reception d'un message d'une application HLG distante

		# Extraction du contenu
		set content [APG_msg_splitstr what $::HLG_rc_mnemomtx]
		# Extraction du destinataire
		set target [APG_msg_splitstr what $::HLG_rc_mnemotarget]
		# Message broadcast ?
		set inter [APG_msg_splitstr what $::HLG_rc_mnemointer]
		# Valeur de l'horloge contenue dans le message
		set h_rcv [APG_msg_splitstr what $::HLG_rcv_mnemoclk]
		# Si le message est destine a ce site (broadcast ou ciblage)
		if { $target == $::HLG_tgt_local || $inter == $::HLG_itr_broadcast } then {   
		    switch -- $content \
			$::HLG_mtx_req {
				# Cas d'une demande d'entrée en SC d'un site distant
			    HLG_hlg_cs_req $h_rcv $target 
			} \
			$::HLG_mtx_lib {
			    # Cas d'une libération de la variable partagée distante, mise à jour
			    set string [APG_msg_splitstr what $::HLG_rc_mnemoscstring]
			    HLG_hlg_cs_lib $h_rcv $target $string
			} \
			$::HLG_mtx_acc {
			    # Cas d'un accusé de réception, on le traite
			    HLG_hlg_cs_acc $h_rcv $target 
			} \
			$::HLG_mtx_nul {
				HLG_lam_update $h_rcv

				# Cas d'un message standard à transmettre à BAS
				set header [APG_msg_createmsg $::HLG_rc_mnemoapp $::APP]
				APG_msg_addmsg header $::HLG_rc_mnemotarget $::APG_ident
				set msg [APG_msg_createmsg $::HLG_rc_mnemomtx $::HLG_mtx_nul]
				set payload [APG_msg_splitstr what $::HLG_rc_mnemopayload]
				set nseq [APG_msg_splitstr what $::HLG_rc_mnemonseq]
				APG_msg_addmsg msg $::HLG_rc_mnemopayload $payload
				APG_msg_addmsg msg $::HLG_rc_mnemonseq $nseq
				set to_send [APG_msg_concatemsg $header $msg]

				HLG_snd_send $to_send $::HLG_rc_basdefault
			} \
			default {
			    APG_vrb_dispwarning "$::APG_ident Message malformé : $content" "APG_receive_whatwho"
			} 
		}
	} \
	default {
		# Reception d'un message d'une application autre que HLG (en général BAS)

		# Extraction du contenu
		set content [APG_msg_splitstr what $::HLG_rc_mnemomtx]
		switch -- $content \
		    $::HLG_mtx_req {
				# Demande d'entrée en SC de BAS 
				HLG_bas_cs_req
		    } \
		    $::HLG_mtx_lib {
				# Fin de SC de BAS
				set ::HLG_string [APG_msg_splitstr what $::HLG_rc_mnemoscstring]	
				HLG_bas_cs_lib
		    } \
		    $::HLG_mtx_nul {
				# Message sans rapport avec les mutex, à diffuser normalement
				set header [APG_msg_createmsg $::HLG_rcv_mnemoapp $who]
				APG_msg_addmsg header $::HLG_rcv_mnemoclk [HLG_lam_incrandget]
				set msg [APG_msg_concatemsg $header $what]
				HLG_snd_send $msg $::APP
		    } \
		    default {
				APG_vrb_dispwarning "$::APG_ident Message malformé : $content" "APG_receive_whatwho"
	    } 
	}
}



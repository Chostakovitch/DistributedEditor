#    hlg
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set HLG_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set HLG_rcv_app $APG_msg_unknown

# mnemonique pour le header HLG, contenant le nom de l'application qui a emis
# le message transporte.
set HLG_rcv_mnemoapp $HLG_rc_mnemoapp

# Mnémonique pour le header HLG, contenant la valeur de l'horloge de Lamport
set HLG_rcv_mnenoclk $HLG_rc_mnenoclk

# Mnémonique Payload
set HLG_rcv_mnemopayload $HLG_rc_mnemopayload

# Mot cle contenu dans le payload declenchant le snap 
set HLG_rcv_is_asking_snap $HLG_rc_is_asking_snap

# Mnémonique pour le header HLG, contenant la valeur pour le snap
set HLG_rcv_mnemosnp $HLG_rc_mnemosnp 

# Couleur rouge/blanc pour l'inplémentation de l'algo avec lestage
set HLG_rcv_color_snap $HLG_rc_color_snap


###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable HLG_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable HLG_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#SURCHARGE
#-- Procedure APG_svg_formatlastdata -----------------------------------------#
# Action : formate la derniere ecriture dans le fichier. Permet par exemple   #
# de sauvegarder des calculs finaux, des moyennes...                          #
# Entree : rien                                                               #
# Retour : donnee formatee, qui sera ecrite dans le fichier de sauvegarde.    #
#-----------------------------------------------------------------------------#
proc APG_svg_formatlastdata { } {
    return "END"
}
#SURCHARGE
#-- Procedure APG_svg_formatfirstdata ----------------------------------------#
# Action : formate l'entete du fichier de sauvegarde. Permet par exemple de   #
# mettre des titres de colonnes lors d'une post-analyse dans un tableur, ou   #
# sauvegarder les conditions de l'execution (parametres)                      #
# Remarq : devrait etre surchargee dans l'application.                        #
# Entree : rien                                                               #
# Retour : donnee formatee, qui sera ecrite dans le fichier de sauvegarde.    #
#-----------------------------------------------------------------------------#
#TODO : rajouter la variable partagee dans le snap
proc APG_svg_formatfirstdata { } {
    return "Date $::APG_svg_delim $::HLG_lam_h"
}
#-- Procedure HLG_take_snap --------------------------------------------------#
# Action : gere la realisation du snapshot                                    #
# Entree : rien                                                               #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc HLG_take_snap { } {
	APG_svg_start
	APG_svg_stop
}

#-- Procedure HLG_altern_color -----------------------------------------------#
# Action : Gestion des couleurs pour le declenchement du snap                 #
#	   Si site BLANC -> deviens ROUGE et inversement                      #
# Entree : rien                                                               #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc HLG_altern_color { } {
	if {$::HLG_rcv_color_snap == "ROUGE"} {
		set ::HLG_rcv_color_snap "BLANC"
	} else {
		set ::HLG_rcv_color_snap "ROUGE"
	}
}
#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#

proc APG_receive_whatwho { what who } {

		# Mise a jour de l'interface du module rcv.
    set ::HLG_rcv_msg $what
    set ::HLG_rcv_app $who

	# Traitement different selon l'emetteur.
    switch -- $::HLG_rcv_app \
				$::APP {
						# Reception d'un message d'une application HLG distante,
						# => transfert vers l'application BAS locale.
						
						# Recuperation de la valeur du champs application emettrice dans le
						# message recu.
						set app [APG_msg_splitstr what $::HLG_rcv_mnemoapp]

						# Récupération de la valeur de l'horloge de Lamport de l'émetteur
						set h_rcv [APG_msg_splitstr what $::HLG_rcv_mnenoclk]

						set snap_rcv [APG_msg_splitstr what $::HLG_rcv_mnemosnp]
 						
						# Si la couleur du message est differente de celle du site
						# alors le site prend un snapshot
						# La couleur sert juste à définir si le snapshot a deja ete pris ou non
						if {$snap_rcv != $::HLG_rcv_color_snap} {
						    HLG_altern_color
						    HLG_take_snap
						} 
						# Mise à jour de l'horloge locale
						HLG_lam_update $h_rcv

						# Affichage de debug
						APG_vrb_dispdebug "received clock: $h_rcv" "APG_receive_whatwho"
 
						# Recuperation eventuelle d'autres champs.

						# Ajout eventuel de traitements ici.
 
						# Recuperation du message qui a ete concatene au header
						# a l'emission. HLG_rcv_mnemoclk doit etre le dernier mnemonique
						# avant le message concatene. Adapter si des champs ont ete ajoutes.
						set msg [APG_msg_endstr what $::HLG_rcv_mnenoclk true]

						# Transfert du message a l'application locale $app
						HLG_snd_send $msg $app
				} \
				default {
						# Reception d'un message d'une application autre que HLG.
						# On suppose donc qu'il s'agit d'une application locale dont les
						# communications sont interceptees par HLG pour realiser un controle
						# sur son execution.
						# => transfert vers les applications HLG distantes.
						
						# Ajout eventuel de traitements ici.

						# Creation d'un header contenant l'application emettrice.
						# Utilisation d'un mnemonique pour retrouver ce champs
						# facilement a la reception.
						set header [APG_msg_createmsg $::HLG_rcv_mnemoapp $who]
						
						# On regarde si le payload correspond à une demande de snapshot
						# emanant de l'app de base
						set is_asking_snap [APG_msg_splitstr what $::HLG_rcv_mnemopayload]
						if {$is_asking_snap == "SNAP"} {
						    APG_vrb_dispdebug "*-SNAPSHOT-*"
						    # On modifie la couleur du site
						    HLG_altern_color
						    HLG_take_snap
						} 
							
						#Ajout du champ de l'horloge de Lamport dans le header
						APG_msg_addmsg header $::HLG_rcv_mnenoclk [HLG_lam_incrandget]

						# Ajout du champ du snapshot
						 APG_msg_addmsg header $::HLG_rcv_mnemosnp $::HLG_rcv_color_snap
						# Formation du message en concatenant le header et le message recu.
						set msg [APG_msg_concatemsg $header $what]

						# Appel de la procedure d'emission pour emettre le message msg
						# vers d'autres applications HLG (cette procedure permet de mettre
						# a jour l'interface du module snd). NB : $::APP = "HLG".
						HLG_snd_send $msg $::APP
	
				}


}

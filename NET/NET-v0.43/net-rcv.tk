#    net
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set NET_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set NET_rcv_app $APG_msg_unknown

# mnemonique pour le header NET, contenant le nom de l'application qui a emis
# le message transporte.
set NET_rcv_mnemoapp $NET_rc_mnemoapp

###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable NET_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable NET_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {

		# Mise a jour de l'interface du module rcv.
    set ::NET_rcv_msg $what
    set ::NET_rcv_app $who

		# Traitement different selon l'emetteur.
    switch -- $::NET_rcv_app \
				$::APP {
						# Reception d'un message d'une application NET distante,

						NET_vec_update $what	
						# Message destine a circuler sur l'anneau (notification snapshot) ?
						set isring [APG_msg_splitstr what $::NET_rc_mnemotarget]
						if { $isring == $::NET_target_ring } {
						    # Message de type msg ?
						    set ismsg [APG_msg_splitstr what $::NET_rc_mnemomsg]
						    # Message de type bilan ?
						    set isbilan [APG_msg_splitstr what $::NET_rc_mnemobilan]
						    if { $ismsg == $::NET_enum_one } {
							    APG_vrb_dispnotif "Received 'msg'"
							    # Declenchement de l'action adequate
							    NET_sna_rcvmsg $what $who
						    } elseif { $isbilan != $::APG_msg_unknown } {
							    APG_vrb_dispnotif "Received 'bilan'"
							    # Declenchement de l'action adequate
							    NET_sna_rcvbilan $what $who	
						    }
						} else {
						    # Message destine a BAS, pas de rapport avec le snapshot
						    NET_sna_basrcv $what $who
						}
				} \
				default {
						# Reception d'un message d'une application autre que NET.
						# On suppose donc qu'il s'agit d'une application locale dont les
						# communications sont interceptees par NET pour realiser un controle
						# sur son execution.


						# Creation d'un header contenant l'application emettrice.
						# Utilisation d'un mnemonique pour retrouver ce champs
						# facilement a la reception.
						set header [APG_msg_createmsg $::NET_rcv_mnemoapp $who]

						# Ajout eventuel d'autres champs dans le header ici.

						# Formation du message en concatenant le header et le message recu.
						set msg [APG_msg_concatemsg $header $what]

						# Declenchement de l'action adequate
						NET_sna_bassnd $msg $::APP
				}
}


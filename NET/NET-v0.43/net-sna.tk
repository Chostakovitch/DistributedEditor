#  net 
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, newapp from NET v0.31
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE SNAPSHOT ####################################################
 
### VARIABLES OF THE MODULE ###################################################

# Definition des differents valeurs prises par les variables enums du snapshot :
# Couleur
set NET_enum_red "rouge"
set NET_enum_whi "blanc"

# Initiateur ( = "instigateur")
set NET_enum_tru "vrai"
set NET_enum_fal "faux"

set NET_enum_one 1

# Etat courant de la sauvegarde
set NET_enum_run "Snapshot running"
set NET_enum_don "Snapshot complete"
set NET_enum_non "No snp operation"

# Output de la partie graphique du module :
set NET_sna_output $::NET_enum_non

# Nombre d'etats attendus :
set NET_sna_nbe 0
# Nombre de messages attendus :
set NET_sna_nbm 0

# Pour sauvegarde des messages dans l'etat global local
# L'index est un compteur qui s'incremente
# Permet notamment de savoir combien de message ont ete sauvegardes localement
set NET_index_msg 0

###############################################################################

  
### GRAPHICAL AREA OF THE MODULE ##############################################
labelframe .sna -pady 2 -padx 2 \
    -text "Snapshot \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle
# Declenchement de la sauvegarde :
button .sna.clic -text "Clic!" \
                -activebackground red \
                -foreground red \
                -font $::APG_int_fnbutton \
                -width 6 \
                -command NET_sna_debut
# Afficher nb etats attendus :
label .sna.t1 -text "NBE = "
label .sna.h1 -textvariable NET_sna_nbe -width 3 -anchor w
# Afficher nb msg attendus :
label .sna.t2 -text "NBM = "
label .sna.h2 -textvariable NET_sna_nbm -width 3 -anchor w
# Afficher etat courant du snapshot :
label .sna.t3 -text "State = "
label .sna.h3 -textvariable NET_sna_output -width 20 -anchor w
pack .sna.t1 .sna.h1 .sna.t2 .sna.h2 .sna.t3 .sna.h3 .sna.clic -side left



###############################################################################

 
### COMMAND LINE OPTION #######################################################

###############################################################################
 
  
### PROCEDURES OF THE MODULE ##################################################

# GARDE : initialisation
proc NET_sna_init { } {
    set ::NET_sna_color $::NET_enum_whi
    set ::NET_sna_bilan 0
    set ::NET_sna_insti $::NET_enum_fal
    # Sauvegarde locale sous forme de tableau vide reparti (une instance par site) :
    array set ::EG []
    set ::NET_sna_nbe 0
    set	::NET_sna_nbm 0
    # Ajout : manipulation de l'horloge vectorielle
    NET_vec_incr
}

# GARDE : debut de l'instantane
proc NET_sna_debut { } {
    # Modification output interface graphique
    set ::NET_sna_output $::NET_enum_run
    NET_vec_incr

    set ::NET_sna_color $::NET_enum_red
    # NET devient l'instigateur :
    set ::NET_sna_insti $::NET_enum_tru

    # Sauvegarde locale declenchee :
    save_local_state    
 
    # On attend les etats de tous les autres sites   
    set ::NET_sna_nbe [expr {$::NET_vec_nbs - 1}]
    # Mise en place du bilan :
    set ::NET_sna_nbm $::NET_sna_bilan

    APG_vrb_dispdebug "DEBUT de la sauvegarde"
}

# GARDE : Envoi d'un message m de l'application de base :
proc NET_sna_bassnd { what who } {
    NET_vec_incr
    incr ::NET_sna_bilan
    
    # Ajout de la couleur :
    set footer [APG_msg_createmsg $::NET_rc_mnemocolor $::NET_sna_color]
    set NET_sna_what [APG_msg_concatemsg  $what $footer ]
    NET_snd_send $NET_sna_what $who
} 

# GARDE : Reception d'un message m de l'application de base :
proc NET_sna_basrcv { what who } {
    NET_vec_incr
   
    # Recuperation de la couleur 
    set c [APG_msg_splitstr what $::NET_rc_mnemocolor]
    
    if { $c == $::NET_enum_red && $::NET_sna_color == $::NET_enum_whi } {
	# Declenchement de la sauvegarde :
	set ::NET_sna_color $::NET_enum_red
	save_local_state

	# On envoie un message de type 'msg' sur l'anneau :
	set ring_mcontent [APG_msg_createmsg $::NET_rc_mnemobilan $::NET_sna_bilan]
	# Message cense circuler sur l'anneau :
	set ring_mfooter [APG_msg_createmsg $::NET_rc_mnemotarget $::NET_target_ring]
	set ring_msg [APG_msg_concatemsg $ring_mcontent $ring_mfooter]
	NET_snd_send $ring_msg $::APP
	APG_vrb_dispnotif "sent 'bilan'"
    
   } elseif { $c == $::NET_enum_whi && $::NET_sna_color == $::NET_enum_red } {
	# Traitement different si le site est l'instigateur de la sauvegarde :
	if { $::NET_sna_insti == $::NET_enum_tru } {
	    set ::NET_sna_nbm [expr {$::NET_sna_nbm - 1}]
	} else {
	    # else n'a en pratique jamais lieu avec la topologie fifo en anneau :
	    # Creation d'un message de type msg
	    set ring_mcontent [APG_msg_createmsg $::NET_rc_mnemomsg $::NET_enum_one]
	    set ring_mfooter [APG_msg_createmsg $::NET_rc_mnemotarget $::NET_target_ring]
	    set ring_msg [APG_msg_concatemsg $ring_mcontent $ring_mfooter]
	    NET_snd_send $ring_msg $::APP
	    APG_vrb_dispnotif "sent 'msg'"
	}
	# Sauvegarde locale du message prepost :
	add_msg_to_EG $what
    }
    # On decremente le bilan :
    set ::NET_sna_bilan [expr {$::NET_sna_bilan -1}] 

    # Envoi a BAS (seulement le message d'origine, cad la partie non liee au snapshot) :
    # Recuperation de l'emetteur :
    set app [APG_msg_splitstr what $::NET_rcv_mnemoapp]
    # Recuperation du message (cf fonction APG_msg_endstr dans libapg) :
    set msg [APG_msg_endstr what $::NET_rcv_mnemoapp true]
    NET_snd_send $msg $app
}

# GARDE : reception d'un message de type bilan (pas de message de type etat)
proc NET_sna_rcvbilan { what who } {
    NET_vec_incr
   
    # Recuperation du bilan distant : 
    set bilan [APG_msg_splitstr what $::NET_rc_mnemobilan]
  
    # Traitement si le site est l'instigateur : 
    if { $::NET_sna_insti == $::NET_enum_tru } {
	# MAJ nb etats et msg attendus :
	set ::NET_sna_nbe [expr {$::NET_sna_nbe - 1}]
	set ::NET_sna_nbm [expr {$::NET_sna_nbm + $bilan}]

	# Conditions reunies pour considerer que la sauvegarde a eu lieu ?
	if { $::NET_sna_nbe == 0 && $::NET_sna_nbm == 0 } {
	    APG_vrb_dispnotif "Fin de la sauvegarde"
	    # MAJ de l'output sur l'interface graphique :
	    set ::NET_sna_output $::NET_enum_don
	    # Reinitialisation de l'interface (Necessaire ?) :
	    after $::NET_rc_delay gui_init
	}
    } else {
	# On se contente de faire circuler sur l'anneau le bilan
	# Ce bilan doit arriver a l'instigateur :
	NET_snd_send $what $who
	APG_vrb_dispnotif "Fetched bilan"
    }
}

# GARDE : reception d'un message de type msg
proc NET_sna_rcvmsg { what who } {
    NET_vec_incr

    set msg [APG_msg_splitstr what $::NET_rc_mnemomsg]
    
    if { $::NET_sna_insti == $::NET_enum_tru } {
	set ::NET_sna_nbm [expr {$::NET_sna_nbm - 1}]
	# Sauvegarde locale :
	add_msg_to_EG $msg
	if { $::NET_sna_nbe == 0 && $::NET_sna_nbm == 0 } {
	    APG_vrb_dispnotif "Fin de la sauvegarde"
	    set ::NET_sna_output $::NET_enum_don
	    after $::NET_rc_delay gui_init
	}
    } else {
	NET_snd_send $what $who
    }
}

# Ajoute le message au tableau associatif representant la sauvegarde locale de l'etat :
proc add_msg_to_EG { msg  } {
    incr ::NET_index_msg
    set ::EG($::NET_rc_mnemomsg$::NET_index_msg) $msg
}

# Sauvegarde locale des donnees du site :
proc save_local_state { } {
    set ::EG($::NET_rc_mnemocolor) $::NET_sna_color
    set ::EG($::NET_rc_mnemoinsti) $::NET_sna_insti
    set ::EG($::NET_rc_mnemobilan) $::NET_sna_bilan
    
    for { set i 1} { $i <= $::NET_vec_nbs } { incr i } {
        set ::EG($::NET_rc_mnemovecclk$i) $::NET_vecclk($i)
    }
}

# Initialisation de l'interface :
proc gui_init { } {
    set ::NET_sna_output $::NET_enum_non
}
###############################################################################

# Obsolete :
proc save_local_state_deprecated { } {
    set ::EG($::NET_rc_mnemocolor$::APG_ident) $::NET_sna_color
    set ::EG($::NET_rc_mnemoinsti$::APG_ident) $::NET_sna_insti
    set ::EG($::NET_rc_mnemobilan$::APG_ident) $::NET_sna_bilan
    
    for { set i 1} { i <= $::NET_vec_nbs } { incr i } {
        set ::EG($::NET_rc_mnemovecclk$::APG_ident$::EG_separator$i) $::NET_vecclk($i)
    }
}
###############################################################################

# On n'oublie pas d'initialiser :)
NET_sna_init



